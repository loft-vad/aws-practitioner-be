service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-auto-swagger
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-central-1

  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SNS_ARN:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:resources.Resources.SNSTopic.Properties.TopicName}",
            ],
          ],
      }

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "sqs:*"
          Resource: !GetAtt SQSQueue.Arn
        - Effect: Allow
          Action:
            - "sns:*"
          Resource:
            Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SNS_QUEUE_NAME}
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_TOPIC_NAME}
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscription2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_EMAIL_2}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          isDress:
            - "true"
  Outputs:
    SQSUrl:
      Value:
        Ref: SQSQueue
      Export:
        Name: SQSUrl
    SQSQueueArn:
      Value: !GetAtt SQSQueue.Arn
      Export:
        Name: SQSQueueArn
    SNSTopic:
      Value:
        Ref: SNSTopic
      Export:
        Name: SNSTopic
    SNSSubscription:
      Value:
        Ref: SNSSubscription
      Export:
        Name: SNSSubscription

functions:
  getProductsList:
    handler: handlers.getProductsListDb
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsById:
    handler: handlers.getProductsByIdDb
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  postProduct:
    handler: handlers.postProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handlers.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt SQSQueue.Arn
